name: Build, Push to ECR, and Deploy to Lambda

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

env:
  AWS_REGION: us-east-1         # Set your preferred AWS region
  ECR_REPOSITORY: test-ada    # Replace with your ECR repository name
  LAMBDA_FUNCTION_NAME: lambda-function  # Replace with your Lambda function name
  LAMBDA_ROLE_ARN: arn:aws:lambda:us-east-1:212924906803:function:ogada # Replace with your Lambda execution role ARN

permissions:
  contents: read

jobs:
  build-and-push:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Docker Image
      id: build-push
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}  # Use the Git commit SHA as the image tag
      run: |
        echo "Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
        echo "Pushing Docker image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        echo "::set-output name=image_uri::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy-to-lambda:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Check if Lambda Function Exists
      id: check-lambda
      run: |
        set -e
        FUNCTION_EXISTS=$(aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --query "Configuration.FunctionName" --output text || echo "NOT_FOUND")
        echo "Function status: $FUNCTION_EXISTS"
        echo "::set-output name=function_exists::$FUNCTION_EXISTS"

    - name: Create or Update Lambda Function
      env:
        IMAGE_URI: ${{ needs.build-and-push.outputs.image_uri }}
        LAMBDA_FUNCTION_NAME: ${{ env.LAMBDA_FUNCTION_NAME }}
        LAMBDA_ROLE_ARN: ${{ env.LAMBDA_ROLE_ARN }}
      run: |
        set -e
        if [ "${{ steps.check-lambda.outputs.function_exists }}" = "NOT_FOUND" ]; then
          echo "Lambda function does not exist. Creating..."
          aws lambda create-function \
            --function-name $LAMBDA_FUNCTION_NAME \
            --package-type Image \
            --code ImageUri=$IMAGE_URI \
            --role $LAMBDA_ROLE_ARN \
            --region $AWS_REGION
          echo "Lambda function created: $LAMBDA_FUNCTION_NAME"
        else
          echo "Lambda function exists. Updating..."
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --image-uri $IMAGE_URI
          echo "Lambda function updated: $LAMBDA_FUNCTION_NAME with image $IMAGE_URI"
